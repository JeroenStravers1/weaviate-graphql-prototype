# source: http://localhost:8081/graphql
# timestamp: Mon Jul 09 2018 15:46:05 GMT+0200 (W. Europe Summer Time)

schema {
  query: WeaviateObj
}

"""City"""
type City {
  """Official name of the city."""
  name: String

  """The city's latitude"""
  latitude: Float

  """Number of inhabitants of the city"""
  population: Int

  """True if the city is a capital"""
  isCapital: Boolean
}

"""City"""
type CityMeta {
  """meta information about class object"""
  meta: CityMetaObj
  name: nameProperty
  latitude: latitudeProperty
  population: populationProperty
  isCapital: isCapitalProperty
}

"""meta information about class object"""
type CityMetaObj {
  """how many class instances are there"""
  counter: Int

  """pointing to and from how many other things"""
  pointing: CityMetaPointing
}

"""pointing to and from how many other things"""
type CityMetaPointing {
  """how many other classes the class is pointing to"""
  to: Int

  """how many other classes the class is pointing from"""
  from: Int
}

"""enum type which denote the classes"""
enum classEnum {
  City
  Person
  MoveAction
}

"""filter where the path end should be equal to the value"""
input ConvertedFetchFilterEQ {
  path: [String]
  value: String
}

"""filter where the path end should be inequal to the value"""
input ConvertedFetchFilterIE {
  path: [String]
  value: String
}

"""filter where the path end should be not equal to the value"""
input ConvertedFetchFilterNEQ {
  path: [String]
  value: String
}

"""Property meta information"""
type costProperty {
  """datatype of the property"""
  type: String

  """Lowest value occurrence"""
  lowest: Float

  """Highest value occurrence"""
  highest: Float

  """average number"""
  average: Float

  """total amount of found instances"""
  counter: Int

  """sum of values of found instances"""
  sum: Float
}

"""Property meta information"""
type fromCityProperty {
  """datatype of the property"""
  type: String

  """total amount of found instances"""
  counter: Int

  """pointing to and from how many other things"""
  pointing: fromCityPropertyMetaPointing
}

"""pointing to and from how many other things"""
type fromCityPropertyMetaPointing {
  """how many other classes the class is pointing to"""
  to: Int

  """how many other classes the class is pointing from"""
  from: Int
}

union FromCityUnionType = City

"""Property meta information"""
type isCapitalProperty {
  """datatype of the property"""
  type: String

  """total amount of boolean value is true"""
  total_true: Int

  """percentage of boolean = true"""
  percentage_true: Float

  """total amount of found instances"""
  counter: Int
}

"""Property meta information"""
type isMovedProperty {
  """datatype of the property"""
  type: String

  """total amount of boolean value is true"""
  total_true: Int

  """percentage of boolean = true"""
  percentage_true: Float

  """total amount of found instances"""
  counter: Int
}

"""Property meta information"""
type latitudeProperty {
  """datatype of the property"""
  type: String

  """Lowest value occurrence"""
  lowest: Float

  """Highest value occurrence"""
  highest: Float

  """average number"""
  average: Float

  """total amount of found instances"""
  counter: Int

  """sum of values of found instances"""
  sum: Float
}

"""Property meta information"""
type livesInProperty {
  """datatype of the property"""
  type: String

  """total amount of found instances"""
  counter: Int

  """pointing to and from how many other things"""
  pointing: livesInPropertyMetaPointing
}

"""pointing to and from how many other things"""
type livesInPropertyMetaPointing {
  """how many other classes the class is pointing to"""
  to: Int

  """how many other classes the class is pointing from"""
  from: Int
}

union LivesInUnionType = City | Person

"""Action of buying a thing"""
type MoveAction {
  """Person who moves"""
  Person: PersonUnionType

  """The city the person moves to"""
  toCity: String

  """The city the person moves to"""
  ToCity: ToCityUnionType

  """The city the person moves from"""
  FromCity: FromCityUnionType

  """Whether the person is already moved"""
  isMoved: Boolean

  """The date the person is moving"""
  date: String

  """The total amount of house moves the person has made"""
  moveNumber: Int

  """The total costs of the movement"""
  cost: Float
}

"""Action of buying a thing"""
type MoveActionMeta {
  """meta information about class object"""
  meta: MoveActionMetaObj
  person: personProperty
  toCity: toCityProperty
  fromCity: fromCityProperty
  isMoved: isMovedProperty

  """The date the person is moving"""
  date: String
  moveNumber: moveNumberProperty
  cost: costProperty
}

"""meta information about class object"""
type MoveActionMetaObj {
  """how many class instances are there"""
  counter: Int

  """pointing to and from how many other things"""
  pointing: MoveActionMetaPointing
}

"""pointing to and from how many other things"""
type MoveActionMetaPointing {
  """how many other classes the class is pointing to"""
  to: Int

  """how many other classes the class is pointing from"""
  from: Int
}

"""Property meta information"""
type moveNumberProperty {
  """datatype of the property"""
  type: String

  """Lowest value occurrence"""
  lowest: Float

  """Highest value occurrence"""
  highest: Float

  """average number"""
  average: Float

  """total amount of found instances"""
  counter: Int

  """sum of values of found instances"""
  sum: Float
}

"""Property meta information"""
type nameProperty {
  """datatype of the property"""
  type: String

  """total amount of found instances"""
  counter: Int

  """most frequent property values"""
  topOccurrences: namePropertyTopOccurrences
}

"""most frequent property values"""
type namePropertyTopOccurrences {
  """property value of the most frequent properties"""
  value: Int

  """number of occurrance"""
  occurs: Int
}

"""Person"""
type Person {
  """The city where the person lives."""
  LivesIn: LivesInUnionType

  """Birthday of the person"""
  birthday: String
}

"""Person"""
type PersonMeta {
  """meta information about class object"""
  meta: PersonMetaObj
  livesIn: livesInProperty

  """Birthday of the person"""
  birthday: String
}

"""meta information about class object"""
type PersonMetaObj {
  """how many class instances are there"""
  counter: Int

  """pointing to and from how many other things"""
  pointing: PersonMetaPointing
}

"""pointing to and from how many other things"""
type PersonMetaPointing {
  """how many other classes the class is pointing to"""
  to: Int

  """how many other classes the class is pointing from"""
  from: Int
}

"""Property meta information"""
type personProperty {
  """datatype of the property"""
  type: String

  """total amount of found instances"""
  counter: Int

  """pointing to and from how many other things"""
  pointing: personPropertyMetaPointing
}

"""pointing to and from how many other things"""
type personPropertyMetaPointing {
  """how many other classes the class is pointing to"""
  to: Int

  """how many other classes the class is pointing from"""
  from: Int
}

union PersonUnionType = Person

"""Property meta information"""
type populationProperty {
  """datatype of the property"""
  type: String

  """Lowest value occurrence"""
  lowest: Float

  """Highest value occurrence"""
  highest: Float

  """average number"""
  average: Float

  """total amount of found instances"""
  counter: Int

  """sum of values of found instances"""
  sum: Float
}

"""Property meta information"""
type toCityProperty {
  """datatype of the property"""
  type: String

  """total amount of found instances"""
  counter: Int

  """most frequent property values"""
  topOccurrences: toCityPropertyTopOccurrences
}

"""most frequent property values"""
type toCityPropertyTopOccurrences {
  """property value of the most frequent properties"""
  value: Int

  """number of occurrance"""
  occurs: Int
}

union ToCityUnionType = City

"""Fetch Actions on the internal Weaviate"""
type WeaviateLocalConvertedFetchActionsObj {
  """Action of buying a thing"""
  MoveAction(
    """How certain about these values?"""
    _certainty: Float

    """define the max returned values."""
    _limit: Int

    """define the amount of values to skip."""
    _skip: Int
  ): [MoveAction]
}

"""
Filter options for the converted fetch search, to convert the data to the filter input
"""
input WeaviateLocalConvertedFetchFilter {
  EQ: [ConvertedFetchFilterEQ]
  NEQ: [ConvertedFetchFilterNEQ]
  IE: [ConvertedFetchFilterIE]
}

"""Fetch things or actions on the internal Weaviate"""
type WeaviateLocalConvertedFetchObj {
  """Locate Things on the local Weaviate"""
  Things: WeaviateLocalConvertedFetchThingsObj

  """Locate Actions on the local Weaviate"""
  Actions: WeaviateLocalConvertedFetchActionsObj
}

"""Fetch things on the internal Weaviate"""
type WeaviateLocalConvertedFetchThingsObj {
  """City"""
  City(
    """How certain about these values?"""
    _certainty: Float

    """define the max returned values."""
    _limit: Int

    """define the amount of values to skip."""
    _skip: Int
  ): [City]

  """Person"""
  Person(
    """How certain about these values?"""
    _certainty: Float

    """define the max returned values."""
    _limit: Int

    """define the amount of values to skip."""
    _skip: Int
  ): [Person]
}

"""Fetch things or actions on the internal Weaviate"""
type WeaviateLocalHelpersFetchObj {
  """Find a set of exact ID's of Things or Actions on the local Weaviate"""
  PinPoint(_stack: WeaviateLocalHelpersFetchPinPointStackEnum, _classes: [classEnum], _properties: [String], _needle: String, _searchType: WeaviateLocalHelpersFetchPinPointSearchTypeEnum, _limit: Int): WeaviateLocalHelpersFetchPinPointObj
}

"""Fetch uuid of Things or Actions on the internal Weaviate"""
type WeaviateLocalHelpersFetchPinPointObj {
  """
  Do a fuzzy search fetch to search Things or Actions on the network weaviate
  """
  uuid: ID
}

enum WeaviateLocalHelpersFetchPinPointSearchTypeEnum {
  standard
}

enum WeaviateLocalHelpersFetchPinPointStackEnum {
  Things
  Actions
}

"""
Filter options for the meta fetch search, to convert the data to the filter input
"""
input WeaviateLocalMetaFetchFilter {
  EQ: [ConvertedFetchFilterEQ]
  NEQ: [ConvertedFetchFilterNEQ]
  IE: [ConvertedFetchFilterIE]
}

"""Action to fetch for meta generic fetch"""
type WeaviateLocalMetaFetchGenericsActionObj {
  """Action of buying a thing"""
  MoveAction(
    """How certain about these values?"""
    _certainty: Float

    """define the max returned values."""
    _limit: Int

    """define the amount of values to skip."""
    _skip: Int
  ): MoveActionMeta
}

"""Object type to fetch"""
type WeaviateLocalMetaFetchGenericsObj {
  """Thing to fetch for meta generic fetch"""
  Things(_maxArraySize: String): WeaviateLocalMetaFetchGenericsThingObj

  """Action to fetch for meta generic fetch"""
  Actions: WeaviateLocalMetaFetchGenericsActionObj
}

"""Thing to fetch for meta generic fetch"""
type WeaviateLocalMetaFetchGenericsThingObj {
  """City"""
  City(
    """How certain about these values?"""
    _certainty: Float

    """define the max returned values."""
    _limit: Int

    """define the amount of values to skip."""
    _skip: Int
  ): CityMeta

  """Person"""
  Person(
    """How certain about these values?"""
    _certainty: Float

    """define the max returned values."""
    _limit: Int

    """define the amount of values to skip."""
    _skip: Int
  ): PersonMeta
}

"""Fetch things or actions on the internal Weaviate"""
type WeaviateLocalMetaFetchObj {
  """Fetch generic meta information based on the type"""
  Generics: WeaviateLocalMetaFetchGenericsObj
}

"""Type of fetch on the internal Weaviate"""
type WeaviateLocalObj {
  """
  Do a converted fetch to search Things or Actions on the local weaviate
  """
  ConvertedFetch(_filter: WeaviateLocalConvertedFetchFilter): WeaviateLocalConvertedFetchObj

  """Do a helpers fetch to search Things or Actions on the local weaviate"""
  HelpersFetch: WeaviateLocalHelpersFetchObj

  """Fetch meta infromation about Things or Actions on the local weaviate"""
  MetaFetch(_filter: WeaviateLocalMetaFetchFilter): WeaviateLocalMetaFetchObj
}

"""Type of fetch on the Weaviate network"""
type WeaviateNetworkObj {
  """
  Do a fuzzy search fetch to search Things or Actions on the network weaviate
  """
  FuzzyFetch: [String]

  """
  Do a fetch with help to search Things or Actions on the network weaviate
  """
  HelpersFetch: [String]

  """To fetch meta information Things or Actions on the network weaviate"""
  MetaFetch: [String]
}

"""Location of the root query"""
type WeaviateObj {
  """Locate on the local Weaviate"""
  Local: WeaviateLocalObj

  """Locate on the Weaviate network"""
  Network: WeaviateNetworkObj
}
